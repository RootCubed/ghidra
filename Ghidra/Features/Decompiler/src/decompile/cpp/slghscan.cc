/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#line 1 "src/decompile/cpp/slghscan.cc"

#line 3 "src/decompile/cpp/slghscan.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[547] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  167,   14,    7,    8,    6,   14,
        3,   13,    4,   13,   13,   13,   13,    5,    1,   58,
       56,   57,   58,   50,   58,   25,   51,   52,   52,   26,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   23,   22,   20,   21,   22,
       17,   19,   18,   15,   68,   66,   67,   61,   68,   61,
       64,   62,   64,   59,   96,   94,   95,   96,   89,   96,
       85,   88,   90,   91,   91,   88,   88,   90,   83,   84,
       87,   90,   90,   71,   86,   69,  163,  161,  162,  155,

      156,  163,  155,  155,  157,  158,  158,  155,  155,  155,
      155,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  155,   99,   97,  166,
      166,  165,  164,    7,    6,    0,   13,   13,   13,   13,
       13,    1,    1,   56,    0,   55,   50,    0,   51,    0,
        0,   52,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   23,   23,   20,    0,   19,   15,   15,   66,    0,
       65,    0,   64,   63,   59,   59,   94,   76,   89,    0,
        0,    0,    0,   90,   90,    0,    0,   91,   75,   77,

       78,   74,   90,   90,   69,   69,  161,  106,  156,    0,
      101,  157,    0,    0,  158,  104,  107,  105,  108,  103,
      102,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,    0,  118,  116,  117,  119,  122,    0,  123,  157,
      157,  146,  157,  157,  157,  157,  157,  157,  157,  110,
      109,  112,  113,  157,  157,  157,  157,  157,  157,  100,
       97,   97,    0,  165,  164,  164,    0,   13,   13,   13,
       13,    0,   54,   53,   51,   41,   51,   51,   38,   51,
       51,   37,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,    0,    0,    0,

        0,   80,    0,   82,   93,   92,   90,   90,    0,  160,
      159,  133,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  121,  124,  120,  125,  157,  157,  157,  157,
      132,  157,  157,  157,  157,  114,  115,  111,  157,  157,
      157,  157,  157,  157,    2,    0,   13,   13,   13,   12,
       24,    0,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   43,   51,   51,   28,   51,
       51,   51,   16,    0,   60,    0,   70,    0,   79,   81,
       90,   90,   98,    0,  157,  157,  148,  157,  135,  157,
      157,  157,  157,  157,  157,  157,  147,  157,  157,  157,

      157,  157,  157,  157,  157,  129,  134,  157,  126,   13,
       13,    9,   51,   51,   51,   51,   51,   51,   46,   51,
       51,   51,   51,   51,   51,   27,   32,   51,   51,   51,
       90,   90,  157,  153,  127,  157,  141,  157,  157,  157,
      157,  136,  157,  154,  157,  157,  157,  137,  157,  157,
      140,   11,   10,   51,   51,   51,   51,   39,   42,   36,
       45,   51,   51,   51,   35,   47,   51,   51,   90,   72,
      128,  157,  157,  157,  152,  157,  157,  157,  157,  149,
      157,  130,   51,   51,   33,   30,   49,   51,   51,   51,
       51,   90,  157,  157,  157,  157,  157,  157,  157,  131,

       51,   34,   51,   51,   51,   44,   90,  157,  157,  157,
      157,  157,  157,  143,   40,   29,   51,   48,   73,  157,
      157,  150,  157,  138,  142,   51,  157,  151,  157,   51,
      157,  139,   51,  157,   51,  157,  157,   31,  157,  157,
      157,  157,  145,  157,  144,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   31,   31,   31,   31,
       32,   32,   32,   32,   32,   33,   32,   32,   34,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   35,
       36,   11,   37,   38,   39,   11,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11
    } ;

static const YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    4,    3,    3,    3,    3,    5,    3,    6,
        6,    6,    6,    3,    3,    3,    3,    3,    3,    3,
        6,    5,    5,    5,    5,    3,    3,    3,    5,    6,
        6,    6,    6,    6,    6,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[587] =
    {   0,
        0,  987,   69,  986,  138,  985,  207,  984,  276,  983,
      345,  982,    0,  412, 1011, 1018,  414, 1018,    0,  998,
     1018,    0, 1018,  950,  964,  967,  958, 1018, 1002, 1018,
      415, 1018,  998,    0,  991, 1018,    0,  380,  402, 1018,
      951,  953,  946,  955,  945,  953,  948,  380,  950,  952,
      386,  380,  373,  953,  938,  988, 1018,  427, 1018,  978,
     1018,    0, 1018,  986, 1018,  434, 1018, 1018,  982,  975,
        0, 1018,  928,  982, 1018,  437, 1018,  957,    0,  420,
     1018, 1018,  965,  392,  424,  422,  423,    0, 1018, 1018,
     1018,  931,  928, 1018, 1018,  977, 1018,  450, 1018,  952,

        0,  966, 1018,  967,    0,  399,  436,  437,  949,  438,
      937,  933,  407,  431,  929,  909,  463,  917,  428,  916,
      432,  915,  425,  475,  911,  923,  899, 1018,  962, 1018,
      961, 1018,  960,  491,    0,    0,    0,  903,  916,  918,
      900,  955, 1018,  494,  951,  950,    0,    0,    0,  479,
        0,  484,  907,  451,  901,  466,  910,  889,  892,  898,
      904,  903,  893,  894,  899,  456,  904,  893,  887,  458,
      884,  937, 1018,  516,    0,    0,  936, 1018,  520,  932,
      931,    0,    0,    0,  933, 1018,  521, 1018,    0,    0,
      882,  877,  879,  914,    0,  492,    0,  506, 1018, 1018,

     1018, 1018,  877,  882,  926, 1018,  528, 1018,    0,    0,
     1018,    0,  513,    0,  515, 1018, 1018, 1018, 1018, 1018,
     1018,  870,  870,  878,  488,  877,  864,  869,  868,  870,
      865,  892, 1018, 1018, 1018, 1018,  891,  890,  889,  861,
      855,    0,  854,  870,  858,  848,  854,  849,  847, 1018,
     1018,  879,  513,  851,  864,  840,  845,  841,  837, 1018,
      896, 1018,  895, 1018,  894, 1018,  883,  855,  846,  836,
      845,  878,  522,    0,  844,    0,  832,  829,    0,  847,
      838,    0,  826,  840,  832,  824,  838,  841,  831,  825,
      833,  834,  831,  830,  813,  824,  828,  857,  856,  855,

      824, 1018,  809,    0,  526,    0,  824,  812,  850,  528,
        0,    0,  805,  810,  809,  802,  807,  804,  802,  797,
      814,  799, 1018, 1018, 1018, 1018,  504,  798,  829,  810,
        0,  795,  806,  787,  793, 1018, 1018, 1018,  788,  787,
      784,  783,  788,  781, 1018,  826,  796,  784,  782,    0,
     1018,  822,  781,  793,  788,  771,  790,  778,  770,  773,
      782,  781,  766,  765,  778,    0,  777,  767,    0,  775,
      778,  759, 1018,  803, 1018,  802, 1018,  801, 1018, 1018,
      773,  757, 1018,  798,  756,  766,    0,  744,    0,  748,
      755,  747,  740,  746,  743,  744,    0,  755,  748,  757,

      743,  739,  752,  737,  736,    0,    0,  750,    0,  744,
      746,    0,  737,  735,  724,  735,  732,  740,    0,  721,
      723,  727,  725,  720,  735,    0,    0,  719,  735,  727,
      723,  722,  710,    0,    0,  738,    0,  729,  711,  709,
      745,    0,  715,    0,  716,  704,  710,    0,  708,  697,
        0,    0,    0,  716,  713,  699,  698,    0,    0,    0,
        0,  701,  715,  710,    0,    0,  702,  687,  693,    0,
        0,  706,  689,  697,    0,  702,  692,  701,  691,    0,
      681,    0,  689,  697,    0,    0,    0,  698,  682,  694,
      693,  692,  695,  686,  679,  681,  691,  688,  670,    0,

      669,    0,  683,  687,  667,    0,  665,  680,  671,  662,
      666,  660,  659,    0,    0,    0,  659,    0,    0,  668,
      672,    0,  674,    0,    0,  658,  659,    0,  652,  598,
      578,    0,  548,  516,  528,  504,  512,    0,  511,  497,
      495,  498,    0,  434,    0, 1018,  558,  564,  570,  572,
      578,  582,  588,  590,  596,  598,  604,  608,  610,  616,
      622,  624,  630,  636,  638,  644,  650,  656,  658,  660,
      481,  662,  664,  666,  464,  668,  447,  674,  680,  686,
      689,  692,  695,  698,  701,  704
    } ;

static const flex_int16_t yy_def[587] =
    {   0,
      546,    1,  546,    3,  546,    5,  546,    7,  546,    9,
      546,   11,  547,  548,  546,  546,  546,  546,  549,  546,
      546,  550,  546,  550,  550,  550,  550,  546,  551,  546,
      546,  546,  552,  553,  546,  546,  554,  546,  546,  546,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  555,  546,  546,  546,  546,
      546,  556,  546,  557,  546,  546,  546,  546,  558,  546,
      559,  546,  559,  560,  546,  546,  546,  546,  561,  546,
      546,  546,  562,  546,  546,  546,  546,  562,  546,  546,
      546,  562,  562,  546,  546,  563,  546,  546,  546,  546,

      564,  546,  546,  546,  565,  546,  546,  546,  546,  546,
      546,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  546,  546,  566,  546,
      567,  546,  568,  546,  549,  569,  550,  550,  550,  550,
      550,  551,  546,  546,  552,  546,  553,  570,  554,  546,
      571,  546,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  555,  546,  546,  572,  556,  557,  546,  546,  558,
      546,  573,  559,  559,  560,  546,  546,  546,  561,  574,
      546,  546,  546,  562,  562,  546,  575,  546,  546,  546,

      546,  546,  562,  562,  563,  546,  546,  546,  564,  576,
      546,  565,  546,  577,  546,  546,  546,  546,  546,  546,
      546,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  546,  546,  546,  546,  546,  546,  546,  546,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  546,
      546,  546,  546,  565,  565,  565,  565,  565,  565,  546,
      578,  546,  579,  546,  580,  546,  581,  550,  550,  550,
      550,  582,  546,  571,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  583,  584,  585,

      546,  546,  546,  562,  546,  575,  562,  562,  586,  546,
      577,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  546,  546,  546,  546,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  546,  546,  546,  565,  565,
      565,  565,  565,  565,  546,  581,  550,  550,  550,  550,
      546,  582,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  546,  583,  546,  584,  546,  585,  546,  546,
      562,  562,  546,  586,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  550,
      550,  550,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      562,  562,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  550,  550,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  562,  562,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  562,  565,  565,  565,  565,  565,  565,  565,  565,

      554,  554,  554,  554,  554,  554,  562,  565,  565,  565,
      565,  565,  565,  565,  554,  554,  554,  554,  562,  565,
      565,  565,  565,  565,  565,  554,  565,  565,  565,  554,
      565,  565,  554,  565,  554,  565,  565,  554,  565,  565,
      565,  565,  565,  565,  565,    0,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546
    } ;

static const flex_int16_t yy_nxt[1088] =
    {   0,
       16,   17,   18,   17,   16,   16,   19,   20,   16,   16,
       16,   21,   21,   16,   16,   21,   21,   22,   16,   16,
       16,   16,   16,   23,   16,   16,   16,   16,   16,   16,
       22,   22,   22,   22,   22,   16,   16,   16,   22,   24,
       22,   22,   25,   22,   22,   22,   22,   22,   22,   22,
       22,   26,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   27,   22,   22,   22,   28,   16,   16,   16,   30,
       31,   32,   31,   30,   33,   34,   35,   30,   30,   30,
       36,   36,   30,   30,   36,   30,   37,   30,   38,   39,
       39,   39,   36,   40,   30,   36,   30,   30,   30,   37,

       37,   37,   37,   37,   36,   36,   30,   37,   41,   42,
       43,   44,   45,   37,   37,   46,   37,   37,   37,   47,
       37,   48,   49,   50,   37,   51,   52,   53,   37,   54,
       55,   37,   37,   37,   30,   30,   30,   30,   57,   58,
       59,   58,   57,   57,   57,   60,   57,   57,   57,   61,
       61,   57,   57,   61,   57,   62,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   62,   62,
       62,   62,   62,   57,   57,   57,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   63,   57,   57,   57,   65,   66,   67,
       66,   68,   69,   68,   70,   68,   68,   65,   68,   68,
       68,   68,   68,   68,   71,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   71,   71,   71,
       71,   71,   68,   68,   72,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   73,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   68,   68,   68,   68,   75,   76,   77,   76,
       78,   75,   79,   80,   75,   81,   75,   82,   82,   82,
       82,   82,   82,   83,   82,   84,   85,   85,   85,   82,

       82,   86,   82,   87,   75,   75,   88,   88,   88,   88,
       88,   89,   90,   91,   88,   88,   88,   88,   88,   88,
       88,   92,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   93,   88,   88,   88,   88,
       88,   94,   95,   75,   82,   97,   98,   99,   98,  100,
       97,  101,  102,  103,  104,   97,  103,  103,  103,  103,
      103,  103,  105,  103,  106,  107,  107,  107,  103,  103,
      108,  109,  110,   97,   97,  105,  105,  105,  105,  105,
      103,  103,  111,  105,  112,  113,  114,  115,  116,  117,
      118,  105,  119,  105,  105,  120,  105,  121,  105,  122,

      105,  123,  124,  125,  105,  105,  105,  105,  105,  126,
       97,  127,  128,  103,  132,  134,  144,  134,  144,  160,
      150,  152,  152,  152,  152,  164,  168,  166,  174,  165,
      174,  190,  196,  161,  167,  179,  169,  179,  187,  213,
      187,  133,  151,  198,  198,  198,  198,  199,  200,  201,
      202,  207,  311,  207,  197,  215,  215,  215,  215,  191,
      223,  214,  216,  217,  219,  220,  224,  232,  248,  306,
      225,  245,  242,  192,  226,  246,  233,  234,  249,  235,
      243,  236,  193,  250,  227,  228,  274,  229,  237,  238,
      239,  545,  134,  251,  134,  144,  276,  144,  273,  273,

      252,  290,  253,  152,  152,  152,  152,  279,  295,  277,
      280,  305,  305,  240,  296,  254,  255,  174,  256,  174,
      291,  179,  187,  179,  187,  198,  198,  198,  198,  207,
      257,  207,  310,  310,  215,  215,  215,  215,  315,  337,
      338,  273,  273,  395,  316,  305,  305,  310,  310,  536,
      537,  544,  543,  542,  541,  540,  539,  396,  130,  130,
      130,  130,  130,  130,  131,  131,  131,  131,  131,  131,
      135,  538,  135,  135,  135,  135,  137,  137,  142,  142,
      142,  142,  142,  142,  145,  145,  145,  145,  147,  535,
      147,  147,  147,  147,  149,  149,  172,  172,  172,  172,

      172,  172,  176,  176,  177,  177,  177,  177,  177,  177,
      180,  180,  180,  180,  183,  183,  185,  185,  185,  185,
      185,  185,  189,  534,  189,  189,  189,  189,  195,  195,
      205,  205,  205,  205,  205,  205,  209,  533,  209,  209,
      209,  209,  212,  212,  261,  261,  261,  261,  261,  261,
      263,  263,  263,  263,  263,  263,  265,  265,  265,  265,
      265,  265,  267,  267,  272,  272,  298,  298,  299,  299,
      300,  300,  309,  309,  261,  261,  261,  261,  261,  261,
      263,  263,  263,  263,  263,  263,  265,  265,  265,  265,
      265,  265,  346,  346,  346,  352,  352,  352,  374,  374,

      374,  376,  376,  376,  378,  378,  378,  384,  384,  384,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,

      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      383,  432,  431,  377,  375,  373,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  351,  412,  411,  410,  345,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  383,  382,  381,  380,  379,  377,  375,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      351,  350,  349,  348,  347,  345,  266,  264,  262,  344,

      343,  342,  341,  340,  339,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  314,  313,  312,  206,  308,
      307,  304,  303,  302,  301,  186,  180,  181,  178,  173,
      297,  294,  293,  292,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  278,  275,  145,  146,  143,  271,  270,
      269,  268,  266,  264,  262,  260,  259,  258,  247,  244,
      241,  231,  230,  222,  221,  218,  211,  210,  208,  206,
      204,  203,  194,  188,  186,  184,  182,  181,  178,  175,
      173,  171,  170,  163,  162,  159,  158,  157,  156,  155,

      154,  153,  148,  146,  143,  141,  140,  139,  138,  136,
      546,  129,   96,   74,   64,   56,   29,   15,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546
    } ;

static const flex_int16_t yy_chk[1088] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   14,   17,   31,   17,   31,   48,
       38,   39,   39,   39,   39,   51,   53,   52,   58,   51,
       58,   80,   84,   48,   52,   66,   53,   66,   76,  106,
       76,   14,   38,   85,   85,   85,   85,   86,   86,   87,
       87,   98,  577,   98,   84,  107,  107,  107,  107,   80,
      113,  106,  108,  108,  110,  110,  113,  117,  123,  575,
      114,  121,  119,   80,  114,  121,  117,  117,  123,  117,
      119,  117,   80,  124,  114,  114,  571,  114,  117,  117,
      117,  544,  134,  124,  134,  144,  154,  144,  150,  150,

      124,  166,  124,  152,  152,  152,  152,  156,  170,  154,
      156,  196,  196,  117,  170,  124,  124,  174,  124,  174,
      166,  179,  187,  179,  187,  198,  198,  198,  198,  207,
      124,  207,  213,  213,  215,  215,  215,  215,  225,  253,
      253,  273,  273,  327,  225,  305,  305,  310,  310,  534,
      534,  542,  541,  540,  539,  537,  536,  327,  547,  547,
      547,  547,  547,  547,  548,  548,  548,  548,  548,  548,
      549,  535,  549,  549,  549,  549,  550,  550,  551,  551,
      551,  551,  551,  551,  552,  552,  552,  552,  553,  533,
      553,  553,  553,  553,  554,  554,  555,  555,  555,  555,

      555,  555,  556,  556,  557,  557,  557,  557,  557,  557,
      558,  558,  558,  558,  559,  559,  560,  560,  560,  560,
      560,  560,  561,  531,  561,  561,  561,  561,  562,  562,
      563,  563,  563,  563,  563,  563,  564,  530,  564,  564,
      564,  564,  565,  565,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,  567,  567,  568,  568,  568,  568,
      568,  568,  569,  569,  570,  570,  572,  572,  573,  573,
      574,  574,  576,  576,  578,  578,  578,  578,  578,  578,
      579,  579,  579,  579,  579,  579,  580,  580,  580,  580,
      580,  580,  581,  581,  581,  582,  582,  582,  583,  583,

      583,  584,  584,  584,  585,  585,  585,  586,  586,  586,
      529,  527,  526,  523,  521,  520,  517,  513,  512,  511,
      510,  509,  508,  507,  505,  504,  503,  501,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      484,  483,  481,  479,  478,  477,  476,  474,  473,  472,
      469,  468,  467,  464,  463,  462,  457,  456,  455,  454,
      450,  449,  447,  446,  445,  443,  441,  440,  439,  438,
      436,  433,  432,  431,  430,  429,  428,  425,  424,  423,
      422,  421,  420,  418,  417,  416,  415,  414,  413,  411,
      410,  408,  405,  404,  403,  402,  401,  400,  399,  398,

      396,  395,  394,  393,  392,  391,  390,  388,  386,  385,
      384,  382,  381,  378,  376,  374,  372,  371,  370,  368,
      367,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  349,  348,  347,  346,  344,
      343,  342,  341,  340,  339,  335,  334,  333,  332,  330,
      329,  328,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  309,  308,  307,  303,  301,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  281,  280,  278,  277,  275,
      272,  271,  270,  269,  268,  267,  265,  263,  261,  259,

      258,  257,  256,  255,  254,  252,  249,  248,  247,  246,
      245,  244,  243,  241,  240,  239,  238,  237,  232,  231,
      230,  229,  228,  227,  226,  224,  223,  222,  205,  204,
      203,  194,  193,  192,  191,  185,  181,  180,  177,  172,
      171,  169,  168,  167,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  155,  153,  146,  145,  142,  141,  140,
      139,  138,  133,  131,  129,  127,  126,  125,  122,  120,
      118,  116,  115,  112,  111,  109,  104,  102,  100,   96,
       93,   92,   83,   78,   74,   73,   70,   69,   64,   60,
       56,   55,   54,   50,   49,   47,   46,   45,   44,   43,

       42,   41,   35,   33,   29,   27,   26,   25,   24,   20,
       15,   12,   10,    8,    6,    4,    2,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "src/decompile/cpp/slghscan.l"
/* ###
 * IP: GHIDRA
 * NOTE: flex skeletons are NOT bound by flex's BSD license
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#line 18 "src/decompile/cpp/slghscan.l"
#include "slgh_compile.hh"
#include "slghparse.hh"
#define yywrap() 1
#define YY_SKIP_YYWRAP

/* If we are building don't include unistd.h */
/* flex provides us with this macro for turning it off */
#ifdef _WIN32
#define YY_NO_UNISTD_H
static int isatty (int fildes) { return 0; }
#endif

struct FileStreamState {
  YY_BUFFER_STATE lastbuffer;	// Last lex buffer corresponding to the stream
  FILE *file;                   // The NEW file stream
};

extern SleighCompile *slgh;
int4 last_preproc;   // lex state before last preprocessing erasure
int4 actionon;       // whether '&' '|' and '^' are treated as actionon in pattern section
int4 withsection = 0; // whether we are between the 'with' keyword and its open brace '{'
vector<FileStreamState> filebuffers;
vector<int4> ifstack;
int4 negative_if = -1;

void preproc_error(const string &err)

{
  slgh->reportError((const Location *)0, err);
  cerr << "Terminating due to error in preprocessing" << endl;
  exit(1);
}

void check_to_endofline(istream &s)

{ // Make sure there is nothing to the end of the line
  s >> ws;
  if (!s.eof())
    if (s.peek() != '#')
      preproc_error("Extra characters in preprocessor directive"); 
}

string read_identifier(istream &s)

{  // Read a proper identifier from the stream
  s >> ws;   // Skip any whitespace
  string res;
  while(!s.eof()) {
    char tok = s.peek();
    if (isalnum(tok) || (tok == '_')) {
      s >> tok;
      res += tok;
    }
    else
      break;
  }
  return res;
}

void preprocess_string(istream &s,string &res)

{  // Grab string surrounded by double quotes from stream or call preprocess_error
  int4 val;
  
  s >> ws;   // Skip any whitespace
  val = s.get();
  if (val != '\"')
    preproc_error("Expecting double quoted string");
  val = s.get();
  while((val != '\"')&&(val>=0)) {
    res += (char)val;
    val = s.get();
  }
  if (val != '\"')
    preproc_error("Missing terminating double quote");
}

extern int4 preprocess_if(istream &s); // Forward declaration for recursion

int4 read_defined_operator(istream &s)

{  // We have seen a -defined- keyword in an if or elif
   // Read macro name used as input, return 1 if it is defined
  char tok = ' ';
  string macroname;
  
  s >> ws >> tok;
  if (tok != '(')
    preproc_error("Badly formed \"defined\" operator");
  macroname = read_identifier(s);
  int4 res = slgh->getPreprocValue(macroname,macroname) ? 1 : 0;
  s >> ws >> tok;
  if (tok != ')')
    preproc_error("Badly formed \"defined\" operator");
  return res;
}

int4 read_boolean_clause(istream &s)

{				// We have seen an if or elif
				// return 1 if condition is true or else 0
  s >> ws;
  if (s.peek()=='(') {		// Parenthetical expression spawns recursion
    int4 val = s.get();
    int4 res = preprocess_if(s);
    s >> ws;
    val = s.get();
    if (val != ')')
      preproc_error("Unbalanced parentheses");
    return res;
  }
				// Otherwise we must have a normal comparison operator
  string lhs,rhs,comp;

  if (s.peek()=='\"')		// Read left-hand side string
    preprocess_string(s,lhs);
  else {
    lhs = read_identifier(s);
    if (lhs == "defined")
      return read_defined_operator(s);
    if (!slgh->getPreprocValue(lhs,lhs))
      preproc_error("Could not find preprocessor macro "+lhs);
  }

  char tok;
  s >> tok;       // Read comparison symbol
  comp += tok;
  s >> tok;
  comp += tok;
    
  s >> ws;
  if (s.peek()=='\"')            // Read right-hand side string
    preprocess_string(s,rhs);
  else {
    rhs = read_identifier(s);
    if (!slgh->getPreprocValue(rhs,rhs))
      preproc_error("Could not find preprocessor macro "+rhs);
  }

  if (comp == "==")
    return (lhs == rhs) ? 1 : 0;
  else if (comp=="!=")
    return (lhs != rhs) ? 1 : 0;
  else
    preproc_error("Syntax error in condition");
  return 0;
}

int4 preprocess_if(istream &s)

{
  int4 res = read_boolean_clause(s);
  s >> ws;
  while((!s.eof())&&(s.peek()!=')')) {
    string boolop;
    char tok;
    s >> tok;
    boolop += tok;
    s >> tok;
    boolop += tok;
    int4 res2 = read_boolean_clause(s);
    if (boolop == "&&")
      res = res & res2;
    else if (boolop == "||")
      res = res | res2;
    else if (boolop == "^^")
      res = res ^ res2;
    else
      preproc_error("Syntax error in expression");
    s >> ws;
  }
  return res;
}

void expand_preprocmacros(string &str)

{
  string::size_type pos;
  string::size_type lastpos = 0;
  pos = str.find("$(",lastpos);
  if (pos == string::npos)
    return;
  string res;
  for(;;) {
    if (pos == string::npos) {
      res += str.substr(lastpos);
      str = res;
      return;
    }
    else {
      res += str.substr(lastpos,(pos-lastpos));
      string::size_type endpos = str.find(')',pos+2);
      if (endpos == string::npos) {
	preproc_error("Unterminated macro in string");
	break;
      }
      string macro = str.substr(pos+2, endpos - (pos+2));
      string value;
      if (!slgh->getPreprocValue(macro,value)) {
	preproc_error("Unknown preprocessing macro "+macro);
	break;
      }
      res += value;
      lastpos = endpos + 1;
    }
    pos = str.find("$(",lastpos);
  }
}

int4 preprocess(int4 cur_state,int4 blank_state)

{
  string str(yytext);
  string::size_type pos = str.find('#');
  if (pos != string::npos)
    str.erase(pos);
  istringstream s(str);
  string type;

  if (cur_state != blank_state)
    last_preproc = cur_state;

  s.get();   // Skip the preprocessor marker
  s >> type;
  if (type == "include") {
    if (negative_if == -1) {  // Not in the middle of a false if clause
      filebuffers.push_back(FileStreamState());   // Save state of current file
      filebuffers.back().lastbuffer = YY_CURRENT_BUFFER;
      filebuffers.back().file = (FILE *)0;
      s >> ws;
      string fname;
      preprocess_string(s,fname);
      expand_preprocmacros(fname);
      slgh->parseFromNewFile(fname);
      fname = slgh->grabCurrentFilePath();
      yyin = fopen(fname.c_str(),"r");
      if (yyin == (FILE *)0)
        preproc_error("Could not open included file "+fname);
      filebuffers.back().file = yyin;
      yy_switch_to_buffer( yy_create_buffer(yyin, YY_BUF_SIZE) );
      check_to_endofline(s);
    }
  }
  else if (type == "define") {
    if (negative_if == -1) {
      string varname;
      string value;
      varname = read_identifier(s);   // Get name of variable being defined
      s >> ws;
      if (s.peek() == '\"')
        preprocess_string(s,value);
      else
        value = read_identifier(s);
      if (varname.size()==0)
        preproc_error("Error in preprocessor definition");
      slgh->setPreprocValue(varname,value);
      check_to_endofline(s);
    }
  }
  else if (type == "undef") {
    if (negative_if == -1) {
      string varname;
      varname = read_identifier(s);		// Name of variable to undefine
      if (varname.size()==0)
        preproc_error("Error in preprocessor undef");
      slgh->undefinePreprocValue(varname);
      check_to_endofline(s);
    }
  }
  else if (type=="ifdef") {
    string varname;
    varname = read_identifier(s);
    if (varname.size()==0)
      preproc_error("Error in preprocessor ifdef");
    string value;
    int4 truth = (slgh->getPreprocValue(varname,value)) ? 1 : 0;
    ifstack.push_back(truth);
    check_to_endofline(s);
  }
  else if (type=="ifndef") {
    string varname;
    varname = read_identifier(s);
    if (varname.size()==0)
      preproc_error("Error in preprocessor ifndef");
    string value;
    int4 truth = (slgh->getPreprocValue(varname,value)) ? 0 : 1;	// flipped from ifdef
    ifstack.push_back(truth);
    check_to_endofline(s);
  }
  else if (type=="if") {
    int4 truth = preprocess_if(s);
    if (!s.eof())
      preproc_error("Unbalanced parentheses");
    ifstack.push_back(truth);
  }
  else if (type=="elif") {
    if (ifstack.empty())
      preproc_error("elif without preceding if");
    if ((ifstack.back()&2)!=0)		// We have already seen an else clause
      preproc_error("elif follows else");
    if ((ifstack.back()&4)!=0)          // We have already seen a true elif clause
      ifstack.back() = 4;               // don't include any other elif clause
    else if ((ifstack.back()&1)!=0)     // Last clause was a true if
      ifstack.back() = 4;               // don't include this elif
    else {
      int4 truth = preprocess_if(s);
      if (!s.eof())
        preproc_error("Unbalanced parentheses");
      if (truth==0)
        ifstack.back() = 0;
      else
        ifstack.back() = 5;
    }
  }
  else if (type=="endif") {
    if (ifstack.empty())
      preproc_error("preprocessing endif without matching if");
    ifstack.pop_back();
    check_to_endofline(s);
  }
  else if (type=="else") {
    if (ifstack.empty())
      preproc_error("preprocessing else without matching if");
    if ((ifstack.back()&2)!=0)
      preproc_error("second else for one if");
    if ((ifstack.back()&4)!=0)       // Seen a true elif clause before
      ifstack.back() = 6;
    else if (ifstack.back()==0)
      ifstack.back() = 3;
    else
      ifstack.back() = 2;
    check_to_endofline(s);
  }
  else
    preproc_error("Unknown preprocessing directive: "+type);

  if (negative_if >= 0) {  // We were in a false state
    if (negative_if+1 < ifstack.size())
      return blank_state;  // false state is still deep in stack
    else                   // false state is popped off or is current and changed
      negative_if = -1;
  }
  if (ifstack.empty()) return last_preproc;
  if ((ifstack.back()&1)==0) {
    negative_if = ifstack.size()-1;
    return blank_state;
  }
  return last_preproc;
}

void preproc_macroexpand(void)

{
  filebuffers.push_back(FileStreamState());
  filebuffers.back().lastbuffer = YY_CURRENT_BUFFER;
  filebuffers.back().file = (FILE *)0;
  string macro(yytext);
  macro.erase(0,2);
  macro.erase(macro.size()-1,1);
  string value;
  if (!slgh->getPreprocValue(macro,value))
    preproc_error("Unknown preprocessing macro "+macro);
  yy_switch_to_buffer( yy_scan_string( value.c_str() ) );
  slgh->parsePreprocMacro();
}

int4 find_symbol(void) {
  string * newstring = new string(yytext);
  SleighSymbol *sym = slgh->findSymbol(*newstring);
  if (sym == (SleighSymbol *)0) {
    yylval.str = newstring;
    return STRING;
  }
  delete newstring;
  switch(sym->getType()) {
  case SleighSymbol::section_symbol:
    yylval.sectionsym = (SectionSymbol *)sym;
    return SECTIONSYM;
  case SleighSymbol::space_symbol:
    yylval.spacesym = (SpaceSymbol *)sym;
    return SPACESYM;
  case SleighSymbol::token_symbol:
    yylval.tokensym = (TokenSymbol *)sym;
    return TOKENSYM;
  case SleighSymbol::userop_symbol:
    yylval.useropsym = (UserOpSymbol *)sym;
    return USEROPSYM;
  case SleighSymbol::value_symbol:
    yylval.valuesym = (ValueSymbol *)sym;
    return VALUESYM;
  case SleighSymbol::valuemap_symbol:
    yylval.valuemapsym = (ValueMapSymbol *)sym;
    return VALUEMAPSYM;
  case SleighSymbol::name_symbol:
    yylval.namesym = (NameSymbol *)sym;
    return NAMESYM;
  case SleighSymbol::varnode_symbol:
    yylval.varsym = (VarnodeSymbol *)sym;
    return VARSYM;
  case SleighSymbol::bitrange_symbol:
    yylval.bitsym = (BitrangeSymbol *)sym;
    return BITSYM;
  case SleighSymbol::varnodelist_symbol:
    yylval.varlistsym = (VarnodeListSymbol *)sym;
    return VARLISTSYM;
  case SleighSymbol::operand_symbol:
    yylval.operandsym = (OperandSymbol *)sym;
    return OPERANDSYM;
  case SleighSymbol::start_symbol:
    yylval.startsym = (StartSymbol *)sym;
    return STARTSYM;
  case SleighSymbol::end_symbol:
    yylval.endsym = (EndSymbol *)sym;
    return ENDSYM;
  case SleighSymbol::next2_symbol:
    yylval.next2sym = (Next2Symbol *)sym;
    return NEXT2SYM;
  case SleighSymbol::subtable_symbol:
    yylval.subtablesym = (SubtableSymbol *)sym;
    return SUBTABLESYM;
  case SleighSymbol::macro_symbol:
    yylval.macrosym = (MacroSymbol *)sym;
    return MACROSYM;
  case SleighSymbol::label_symbol:
    yylval.labelsym = (LabelSymbol *)sym;
    return LABELSYM;
  case SleighSymbol::epsilon_symbol:
    yylval.specsym = (SpecificSymbol *)sym;
    return SPECSYM;
  case SleighSymbol::context_symbol:
    yylval.contextsym = (ContextSymbol *)sym;
    return CONTEXTSYM;
  case SleighSymbol::dummy_symbol:
    break;
  }
  return -1;   // Should never reach here
}

int4 scan_number(char *numtext,YYSTYPE *lval,bool signednum)

{
  uintb val;
  if (numtext[0] == '0' && numtext[1] == 'b') {
    val = 0;
    numtext += 2;
    while ((*numtext) != 0) {
      val <<= 1;
      if (*numtext == '1') {
        val |= 1;
      }
      ++numtext;
    }
  } else {
    istringstream s(numtext);
    s.unsetf(ios::dec | ios::hex | ios::oct);
    s >> val;
    if (!s)
      return BADINTEGER;
  }
  if (signednum) {
    lval->big = new intb(val);
    return INTB;
  }
  lval->i = new uintb(val);
  return INTEGER;
}

#line 1351 "src/decompile/cpp/slghscan.cc"

#line 1353 "src/decompile/cpp/slghscan.cc"

#define INITIAL 0
#define defblock 1
#define macroblock 2
#define print 3
#define pattern 4
#define sem 5
#define preproc 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 493 "src/decompile/cpp/slghscan.l"


#line 1582 "src/decompile/cpp/slghscan.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 547 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1018 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 495 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(INITIAL,preproc) ); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 496 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 497 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 498 "src/decompile/cpp/slghscan.l"
{ BEGIN(print); slgh->calcContextLayout(); yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 499 "src/decompile/cpp/slghscan.l"
{ BEGIN(sem); yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 500 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 7:
YY_RULE_SETUP
#line 501 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 502 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 503 "src/decompile/cpp/slghscan.l"
{ BEGIN(macroblock); return MACRO_KEY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 504 "src/decompile/cpp/slghscan.l"
{ BEGIN(defblock); return DEFINE_KEY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 505 "src/decompile/cpp/slghscan.l"
{ BEGIN(defblock); slgh->calcContextLayout(); return ATTACH_KEY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 506 "src/decompile/cpp/slghscan.l"
{ BEGIN(pattern); withsection = 1; slgh->calcContextLayout(); return WITH_KEY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 507 "src/decompile/cpp/slghscan.l"
{  return find_symbol();  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 508 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 510 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(macroblock,preproc) ); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 511 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 512 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 513 "src/decompile/cpp/slghscan.l"
{ BEGIN(sem); return yytext[0]; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 514 "src/decompile/cpp/slghscan.l"
{  yylval.str = new string(yytext); return STRING;  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 515 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 516 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 517 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 519 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(defblock,preproc) ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 520 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 521 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 522 "src/decompile/cpp/slghscan.l"
{ BEGIN(INITIAL); yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 523 "src/decompile/cpp/slghscan.l"
{ return SPACE_KEY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 524 "src/decompile/cpp/slghscan.l"
{ return TYPE_KEY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 525 "src/decompile/cpp/slghscan.l"
{ return RAM_KEY; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 526 "src/decompile/cpp/slghscan.l"
{ return DEFAULT_KEY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 527 "src/decompile/cpp/slghscan.l"
{ return REGISTER_KEY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 528 "src/decompile/cpp/slghscan.l"
{ return TOKEN_KEY; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 529 "src/decompile/cpp/slghscan.l"
{ return CONTEXT_KEY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 530 "src/decompile/cpp/slghscan.l"
{ return BITRANGE_KEY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 531 "src/decompile/cpp/slghscan.l"
{ return SIGNED_KEY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 532 "src/decompile/cpp/slghscan.l"
{ return NOFLOW_KEY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 533 "src/decompile/cpp/slghscan.l"
{ return HEX_KEY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 534 "src/decompile/cpp/slghscan.l"
{ return DEC_KEY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 535 "src/decompile/cpp/slghscan.l"
{ return ENDIAN_KEY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 536 "src/decompile/cpp/slghscan.l"
{ return ALIGN_KEY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 537 "src/decompile/cpp/slghscan.l"
{ return BIG_KEY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 538 "src/decompile/cpp/slghscan.l"
{ return LITTLE_KEY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 539 "src/decompile/cpp/slghscan.l"
{ return SIZE_KEY; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 540 "src/decompile/cpp/slghscan.l"
{ return WORDSIZE_KEY; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 541 "src/decompile/cpp/slghscan.l"
{ return OFFSET_KEY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 542 "src/decompile/cpp/slghscan.l"
{ return NAMES_KEY; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 543 "src/decompile/cpp/slghscan.l"
{ return VALUES_KEY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 544 "src/decompile/cpp/slghscan.l"
{ return VARIABLES_KEY; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 545 "src/decompile/cpp/slghscan.l"
{ return PCODEOP_KEY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 546 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 51:
YY_RULE_SETUP
#line 547 "src/decompile/cpp/slghscan.l"
{  return find_symbol();  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 548 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 549 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 550 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 551 "src/decompile/cpp/slghscan.l"
{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 552 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 553 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 554 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 557 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(print,preproc) ); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 558 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 559 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return CHAR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 560 "src/decompile/cpp/slghscan.l"
{ yylval.ch = '^'; return '^'; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 561 "src/decompile/cpp/slghscan.l"
{ BEGIN(pattern); actionon=0; return IS_KEY; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 562 "src/decompile/cpp/slghscan.l"
{  yylval.str = new string(yytext); return SYMBOLSTRING;  }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 563 "src/decompile/cpp/slghscan.l"
{ yylval.str = new string(yytext+1,strlen(yytext)-2); return STRING; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 564 "src/decompile/cpp/slghscan.l"
{ yylval.ch = ' '; return ' '; }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 565 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); return ' '; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 566 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 568 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(pattern,preproc) ); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 569 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 570 "src/decompile/cpp/slghscan.l"
{ BEGIN((withsection==1) ? INITIAL:sem); withsection=0; yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 571 "src/decompile/cpp/slghscan.l"
{ BEGIN(INITIAL); return OP_UNIMPL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 572 "src/decompile/cpp/slghscan.l"
{ return GLOBALSET_KEY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 573 "src/decompile/cpp/slghscan.l"
{ return OP_RIGHT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 574 "src/decompile/cpp/slghscan.l"
{ return OP_LEFT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 575 "src/decompile/cpp/slghscan.l"
{ return OP_NOTEQUAL; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 576 "src/decompile/cpp/slghscan.l"
{ return OP_LESSEQUAL; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 577 "src/decompile/cpp/slghscan.l"
{ return OP_GREATEQUAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 578 "src/decompile/cpp/slghscan.l"
{ return OP_AND; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 579 "src/decompile/cpp/slghscan.l"
{ return OP_OR; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 580 "src/decompile/cpp/slghscan.l"
{ return OP_XOR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 581 "src/decompile/cpp/slghscan.l"
{ return ELLIPSIS_KEY; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 582 "src/decompile/cpp/slghscan.l"
{ actionon = 1; yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 583 "src/decompile/cpp/slghscan.l"
{ actionon = 0; yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 584 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_AND; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 585 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0];  return (actionon==0) ? yytext[0] : OP_OR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 586 "src/decompile/cpp/slghscan.l"
{ return OP_XOR; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 587 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 588 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 90:
YY_RULE_SETUP
#line 589 "src/decompile/cpp/slghscan.l"
{ return find_symbol();   }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 590 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,true); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 591 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,true); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 592 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,true); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 593 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 594 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 595 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 597 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(sem,preproc) ); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 598 "src/decompile/cpp/slghscan.l"
{ preproc_macroexpand(); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 599 "src/decompile/cpp/slghscan.l"
{ BEGIN(INITIAL); yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 600 "src/decompile/cpp/slghscan.l"
{ return OP_BOOL_OR; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 601 "src/decompile/cpp/slghscan.l"
{ return OP_BOOL_AND; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 602 "src/decompile/cpp/slghscan.l"
{ return OP_BOOL_XOR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 603 "src/decompile/cpp/slghscan.l"
{ return OP_RIGHT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 604 "src/decompile/cpp/slghscan.l"
{ return OP_LEFT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 605 "src/decompile/cpp/slghscan.l"
{ return OP_EQUAL; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 606 "src/decompile/cpp/slghscan.l"
{ return OP_NOTEQUAL; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 607 "src/decompile/cpp/slghscan.l"
{ return OP_LESSEQUAL; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 608 "src/decompile/cpp/slghscan.l"
{ return OP_GREATEQUAL; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 609 "src/decompile/cpp/slghscan.l"
{ return OP_SDIV; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 610 "src/decompile/cpp/slghscan.l"
{ return OP_SREM; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 611 "src/decompile/cpp/slghscan.l"
{ return OP_SRIGHT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 612 "src/decompile/cpp/slghscan.l"
{ return OP_SLESS; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 613 "src/decompile/cpp/slghscan.l"
{ return OP_SGREAT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 614 "src/decompile/cpp/slghscan.l"
{ return OP_SLESSEQUAL; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 615 "src/decompile/cpp/slghscan.l"
{ return OP_SGREATEQUAL; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 616 "src/decompile/cpp/slghscan.l"
{ return OP_FADD; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 617 "src/decompile/cpp/slghscan.l"
{ return OP_FSUB; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 618 "src/decompile/cpp/slghscan.l"
{ return OP_FMULT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 619 "src/decompile/cpp/slghscan.l"
{ return OP_FDIV; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 620 "src/decompile/cpp/slghscan.l"
{ return OP_FEQUAL; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 621 "src/decompile/cpp/slghscan.l"
{ return OP_FNOTEQUAL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 622 "src/decompile/cpp/slghscan.l"
{ return OP_FLESS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 623 "src/decompile/cpp/slghscan.l"
{ return OP_FGREAT; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 624 "src/decompile/cpp/slghscan.l"
{ return OP_FLESSEQUAL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 625 "src/decompile/cpp/slghscan.l"
{ return OP_FGREATEQUAL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 626 "src/decompile/cpp/slghscan.l"
{ return OP_ZEXT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 627 "src/decompile/cpp/slghscan.l"
{ return OP_CARRY; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 628 "src/decompile/cpp/slghscan.l"
{ return OP_BORROW; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 629 "src/decompile/cpp/slghscan.l"
{ return OP_SEXT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 630 "src/decompile/cpp/slghscan.l"
{ return OP_SCARRY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 631 "src/decompile/cpp/slghscan.l"
{ return OP_SBORROW; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 632 "src/decompile/cpp/slghscan.l"
{ return OP_NAN; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 633 "src/decompile/cpp/slghscan.l"
{ return OP_ABS; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 634 "src/decompile/cpp/slghscan.l"
{ return OP_SQRT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 635 "src/decompile/cpp/slghscan.l"
{ return OP_CEIL; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 636 "src/decompile/cpp/slghscan.l"
{ return OP_FLOOR; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 637 "src/decompile/cpp/slghscan.l"
{ return OP_ROUND; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 638 "src/decompile/cpp/slghscan.l"
{ return OP_INT2FLOAT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 639 "src/decompile/cpp/slghscan.l"
{ return OP_FLOAT2FLOAT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 640 "src/decompile/cpp/slghscan.l"
{ return OP_TRUNC; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 641 "src/decompile/cpp/slghscan.l"
{ return OP_CPOOLREF; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 642 "src/decompile/cpp/slghscan.l"
{ return OP_NEW; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 643 "src/decompile/cpp/slghscan.l"
{ return OP_POPCOUNT; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 644 "src/decompile/cpp/slghscan.l"
{ return OP_COUNTLEADINGZEROS; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 645 "src/decompile/cpp/slghscan.l"
{ return OP_COUNTLEADINGONES; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 646 "src/decompile/cpp/slghscan.l"
{ return IF_KEY; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 647 "src/decompile/cpp/slghscan.l"
{ return GOTO_KEY; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 648 "src/decompile/cpp/slghscan.l"
{ return CALL_KEY; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 649 "src/decompile/cpp/slghscan.l"
{ return RETURN_KEY; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 650 "src/decompile/cpp/slghscan.l"
{ return DELAYSLOT_KEY; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 651 "src/decompile/cpp/slghscan.l"
{ return CROSSBUILD_KEY; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 652 "src/decompile/cpp/slghscan.l"
{ return EXPORT_KEY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 653 "src/decompile/cpp/slghscan.l"
{ return BUILD_KEY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 654 "src/decompile/cpp/slghscan.l"
{ return LOCAL_KEY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 655 "src/decompile/cpp/slghscan.l"
{ yylval.ch = yytext[0]; return yytext[0]; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 656 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 157:
YY_RULE_SETUP
#line 657 "src/decompile/cpp/slghscan.l"
{ return find_symbol();   }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 658 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 659 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 660 "src/decompile/cpp/slghscan.l"
{ return scan_number(yytext,&yylval,false); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 661 "src/decompile/cpp/slghscan.l"

	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 662 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 663 "src/decompile/cpp/slghscan.l"
{ return yytext[0]; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 665 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); BEGIN( preprocess(preproc,preproc) ); }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 666 "src/decompile/cpp/slghscan.l"
{ slgh->nextLine(); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(defblock):
case YY_STATE_EOF(macroblock):
case YY_STATE_EOF(print):
case YY_STATE_EOF(pattern):
case YY_STATE_EOF(sem):
case YY_STATE_EOF(preproc):
#line 668 "src/decompile/cpp/slghscan.l"
{ yy_delete_buffer( YY_CURRENT_BUFFER );
          if (filebuffers.empty())
            yyterminate(); 
          yy_switch_to_buffer( filebuffers.back().lastbuffer );
	  FILE *curfile = filebuffers.back().file;
	  if (curfile != (FILE *)0)
	    fclose(curfile);
          filebuffers.pop_back();
          slgh->parseFileFinished();
        }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 678 "src/decompile/cpp/slghscan.l"
ECHO;
	YY_BREAK
#line 2503 "src/decompile/cpp/slghscan.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 547 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 547 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 546);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 678 "src/decompile/cpp/slghscan.l"
